<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shaunak Das on Andrey Akinshin</title><link>https://aakinshin.net/library/authors/shaunak-das/</link><description>Recent content in Shaunak Das on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://aakinshin.net/library/authors/shaunak-das/index.xml" rel="self" type="application/rss+xml"/><item><title>Hunter is affected by strong noise</title><link>https://aakinshin.net/library/quotes/a4192cbd-ee25-4d65-a58c-b300885d098a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aakinshin.net/library/quotes/a4192cbd-ee25-4d65-a58c-b300885d098a/</guid><description>One of the teams using Hunter was afflicted with frequent change point messages via the Slack bot. After investigating these change points they discovered that the performance of the application hadn’t changed, rather the change in benchmark results was caused by unstable hardware performance in a private data center. Changes of +- 10% for the median latency were typical.
While Hunter can detect statistically significant changes in time series data, it is still not impervious to data that contains wildly fluctuating points such as that produced by running benchmarks on untuned hardware.</description></item><item><title>Hunter: Using Change Point Detection to Hunt for Performance Regressions</title><link>https://aakinshin.net/library/papers/fleming2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aakinshin.net/library/papers/fleming2023/</guid><description>The authors present an open-source framework github/hunter for automatic change point detection.
Notes:
Assumes normality + Student’s t-test Haven&amp;rsquo;t performed own experiments yet, but expect poor accuracy and alpha in multimodal cases Presented data samples in Figure 2 do not have any unpleasant deviations In Hunter is affected by strong noise, the authors admit issues on untuned hardware Comparison only with PELT and DYNP, no mentions of ED-PELT (see haynes2016) Reference Matt Fleming, Piotr Kolaczkowski, Ishita Kumar, Shaunak Das, Sean McCarthy, Pushkala Pattabhiraman, Henrik Ingo “Hunter: Using Change Point Detection to Hunt for Performance Regressions” (2023) // Proceedings of the 2023 ACM/SPEC International Conference on Performance Engineering. Publisher: ACM. DOI: 10.1145/3578244.3583719
Abstract Change point detection has recently gained popularity as a method of detecting performance changes in software due to its ability to cope with noisy data. In this paper we present Hunter, an open source tool that automatically detects performance regressions and improvements in time-series data. Hunter uses a modified E-divisive means algorithm to identify statistically significant changes in normally-distributed performance metrics. We describe the changes we made to the E-divisive means algorithm along with their motivation. The main change we adopted was to replace the significance test using randomized permutations with a Student&amp;rsquo;s t-test, as we discovered that the randomized approach did not produce deterministic results, at least not with a reasonable number of iterations. In addition we&amp;rsquo;ve made tweaks that allow us to find change points the original algorithm would not, such as two nearby changes. For evaluation, we developed a method to generate real timeseries, but with artificially injected changes in latency. We used these data sets to compare Hunter against two other well known algorithms, PELT and DYNP. Finally, we conclude with lessons we&amp;rsquo;ve learned supporting Hunter across teams with individual responsibility for the performance of their project.</description></item></channel></rss>