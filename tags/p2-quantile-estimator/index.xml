<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>P² Quantile Estimator on Andrey Akinshin</title><link>https://aakinshin.net/tags/p2-quantile-estimator/</link><description>Recent content in P² Quantile Estimator on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/p2-quantile-estimator/index.xml" rel="self" type="application/rss+xml"/><item><title>Merging extended P² quantile estimators, Part 1</title><link>https://aakinshin.net/posts/merging-exp2-1/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/merging-exp2-1/</guid><description>&lt;p>&lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">P² quantile estimator&lt;/a> is a streaming quantile estimator
with $\mathcal{O}(1)$ memory footprint and an extremely fast update procedure.
Several days ago, I learned that it was &lt;a href="https://twitter.com/rickbrewPDN/status/1740233421673349544">adopted&lt;/a> for
the new Paint.NET GPU-based Median Sketch effect
(the description is &lt;a href="https://forums.getpaint.net/topic/124261-median-sketch-gpu/">here&lt;/a>).
While P² meets the basic problem requirement (streaming median approximation without storing all the values),
the algorithm performance is still not acceptable without additional adjustments.
A significant performance improvement &lt;a href="https://twitter.com/rickbrewPDN/status/1740422610545234153">can be obtained&lt;/a>
if we split the input stream, process each part separately with a separate P², and merge the results.
Unfortunately, the merging procedure is a tricky thing to implement.
I enjoy such challenges, so I decided to attempt to build such a merging approach.
In this post, I describe my first attempt.&lt;/p></description></item><item><title>Moving extended P² quantile estimator</title><link>https://aakinshin.net/posts/moving-ex-p2-quantile-estimator/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/moving-ex-p2-quantile-estimator/</guid><description>&lt;p>In the previous posts, I discussed
&lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">the P² quantile estimator&lt;/a>
(a sequential estimator which takes $O(1)$ memory and estimates a single predefined quantile),
&lt;a href="https://aakinshin.net/posts/mp2-quantile-estimator/">the moving P² quantile estimator&lt;/a>
(a moving modification of P² which estimates quantiles within the moving window),
and &lt;a href="https://aakinshin.net/posts/ex-p2-quantile-estimator/">the extended P² quantile estimator&lt;/a>
(a sequential estimator which takes $O(m)$ memory and estimates $m$ predefined quantiles).&lt;/p>
&lt;p>Now it&amp;rsquo;s time to build &lt;em>the moving modification of the extended P² quantile estimator&lt;/em>
which estimates $m$ predefined quantiles using $O(m)$ memory within the moving window.&lt;/p></description></item><item><title>Extended P² quantile estimator</title><link>https://aakinshin.net/posts/ex-p2-quantile-estimator/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/ex-p2-quantile-estimator/</guid><description>&lt;p>I already covered &lt;em>the P² quantile estimator&lt;/em> and its possible implementation improvements
in &lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">several blog posts&lt;/a>.
This sequential estimator uses $O(1)$ memory and allows estimating a single predefined quantile.
Now it&amp;rsquo;s time to discuss &lt;em>the extended P² quantile estimator&lt;/em> that allows estimating multiple predefined quantiles.
This extended version was suggested in the paper
&lt;a href="https://doi.org/10.1177/003754978704900405">&amp;ldquo;Simultaneous estimation of several percentiles&amp;rdquo;&lt;/a>.
In this post, we briefly discuss the approach from this paper and how we can improve its implementation.&lt;/p></description></item><item><title>P² quantile estimator marker adjusting order</title><link>https://aakinshin.net/posts/p2-quantile-estimator-adjusting-order/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/p2-quantile-estimator-adjusting-order/</guid><description>&lt;p>I have already written a few blog posts about the P² quantile estimator
(which is a sequential estimator that uses $O(1)$ memory):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">&lt;svg class="rating-icon">&lt;use xlink:href="https://aakinshin.net/img/fa/all.svg#tag">&lt;/use>&lt;/svg>P² Quantile Estimator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aakinshin.net/posts/p2-quantile-estimator-rounding-issue/">&lt;svg class="rating-icon">&lt;use xlink:href="https://aakinshin.net/img/fa/all.svg#note">&lt;/use>&lt;/svg>P² quantile estimator rounding issue&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aakinshin.net/posts/p2-quantile-estimator-initialization/">&lt;svg class="rating-icon">&lt;use xlink:href="https://aakinshin.net/img/fa/all.svg#note">&lt;/use>&lt;/svg>P² quantile estimator initialization strategy&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this post, we continue improving the P² implementation
so that it gives better estimations for streams with a small number of elements.&lt;/p></description></item><item><title>P² quantile estimator initialization strategy</title><link>https://aakinshin.net/posts/p2-quantile-estimator-initialization/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/p2-quantile-estimator-initialization/</guid><description>&lt;p>&lt;strong>Update: the estimator accuracy could be improved using a bunch of &lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">patches&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>The P² quantile estimator is a sequential estimator that uses $O(1)$ memory.
Thus, for the given sequence of numbers, it allows estimating quantiles without storing values.
I have already written a few blog posts about it:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">&lt;svg class="rating-icon">&lt;use xlink:href="https://aakinshin.net/img/fa/all.svg#tag">&lt;/use>&lt;/svg>P² Quantile Estimator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aakinshin.net/posts/p2-quantile-estimator-rounding-issue/">&lt;svg class="rating-icon">&lt;use xlink:href="https://aakinshin.net/img/fa/all.svg#note">&lt;/use>&lt;/svg>P² quantile estimator rounding issue&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I tried this estimator in various contexts, and it shows pretty decent results.
However, recently I stumbled on a corner case:
if we want to estimate extreme quantile ($p &lt; 0.1$ or $p > 0.9$),
this estimator provides inaccurate results on small number streams ($n &lt; 10$).
While it looks like a minor issue, it would be nice to fix it.
In this post, we briefly discuss choosing a better initialization strategy to workaround this problem.&lt;/p></description></item><item><title>P² quantile estimator rounding issue</title><link>https://aakinshin.net/posts/p2-quantile-estimator-rounding-issue/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/p2-quantile-estimator-rounding-issue/</guid><description>&lt;p>&lt;strong>Update: the estimator accuracy could be improved using a bunch of &lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">patches&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>The P² quantile estimator is a sequential estimator that uses $O(1)$ memory.
Thus, for the given sequence of numbers, it allows estimating quantiles without storing values.
I already wrote &lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">a blog post&lt;/a> about this approach and
&lt;a href="https://github.com/AndreyAkinshin/perfolizer/commit/9e9ff80a4d097fe4c0814ca51c7fbe942763e308">added&lt;/a>
its implementation in &lt;a href="https://github.com/AndreyAkinshin/perfolizer">perfolizer&lt;/a>.
Recently, I got a &lt;a href="https://github.com/AndreyAkinshin/perfolizer/issues/8">bug report&lt;/a>
that revealed a flaw of the &lt;a href="https://doi.org/10.1145/4372.4378">original paper&lt;/a>.
In this post, I&amp;rsquo;m going to briefly discuss this issue and the corresponding fix.&lt;/p></description></item><item><title>MP² quantile estimator: estimating the moving median without storing values</title><link>https://aakinshin.net/posts/mp2-quantile-estimator/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/mp2-quantile-estimator/</guid><description>&lt;p>In one of the previous posts, I &lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">described&lt;/a> the P² quantile estimator.
It allows estimating quantiles on a stream of numbers without storing them.
Such sequential (streaming/online) quantile estimators are useful in software telemetry because
they help to evaluate the median and other distribution quantiles without a noticeable memory footprint.&lt;/p>
&lt;p>After the publication, I got a lot of questions about &lt;em>moving&lt;/em> sequential quantile estimators.
Such estimators return quantile values not for the whole stream of numbers,
but only for the recent values.
So, I &lt;a href="https://aakinshin.net/posts/partitioning-heaps-quantile-estimator/">wrote&lt;/a> another post about
a quantile estimator based on a partitioning heaps (inspired by the Hardle-Steiger method).
This algorithm gives you the exact value of any order statistics for the last $L$ numbers
($L$ is known as the window size).
However, it requires $O(L)$ memory, and it takes $O(log(L))$ time to process each element.
This may be acceptable in some cases.
Unfortunately, it doesn&amp;rsquo;t allow implementing low-overhead telemetry in the case of large $L$.&lt;/p>
&lt;p>In this post, I&amp;rsquo;m going to present a moving modification of the P² quantile estimator.
Let&amp;rsquo;s call it MP² (moving P²).
It requires $O(1)$ memory, it takes $O(1)$ to process each element,
and it supports windows of any size.
Of course, we have a trade-off with the estimation accuracy:
it returns a quantile approximation instead of the exact order statistics.
However, in most cases, the MP² estimations are pretty accurate from the practical point of view.&lt;/p>
&lt;p>Let&amp;rsquo;s discuss MP² in detail!&lt;/p></description></item><item><title>P² quantile estimator: estimating the median without storing values</title><link>https://aakinshin.net/posts/p2-quantile-estimator-intro/</link><pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/p2-quantile-estimator-intro/</guid><description>&lt;p>&lt;strong>Update: the estimator accuracy could be improved using a bunch of &lt;a href="https://aakinshin.net/tags/p2-quantile-estimator/">patches&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>Imagine that you are implementing performance telemetry in your application.
There is an operation that is executed millions of times, and you want to get its &amp;ldquo;average&amp;rdquo; duration.
It&amp;rsquo;s not a good idea to use the arithmetic mean because the obtained value can be easily spoiled by outliers.
It&amp;rsquo;s much better to use the median which is one of the most robust ways to describe the average.&lt;/p>
&lt;p>The straightforward median estimation approach requires storing all the values.
In our case, it&amp;rsquo;s a bad idea to keep all the values because it will significantly increase the memory footprint.
Such telemetry is harmful because it may become a new bottleneck instead of monitoring the actual performance.&lt;/p>
&lt;p>Another way to get the median value is to use a sequential quantile estimator
(also known as an online quantile estimator or a streaming quantile estimator).
This is an algorithm that allows calculating the median value (or any other quantile value)
using a fixed amount of memory.
Of course, it provides only an approximation of the real median value,
but it&amp;rsquo;s usually enough for typical telemetry use cases.&lt;/p>
&lt;p>In this post, I will show one of the simplest sequential quantile estimators that is called the P² quantile estimator
(or the Piecewise-Parabolic quantile estimator).&lt;/p></description></item><item><title>Simultaneous Estimation of Several Percentiles</title><link>https://aakinshin.net/library/papers/raatikainen1987/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aakinshin.net/library/papers/raatikainen1987/</guid><description>Extended P² quantile estimator.
Reference Kimmo E E Raatikainen “Simultaneous estimation of several percentiles” (1987) // SIMULATION. Publisher: SAGE Publications. Vol. 49. No 4. Pp. 159–163. DOI: 10.1177/003754978704900405
Abstract In many simulation studies the performance of the modeled system is characterized only by mean values of the performance indices. However, the percentiles are more informative in sum marizing the performance. Several simultaneous percentiles, pre sented for example in the form of the boxplot, provide the analyst with better understanding of the system&amp;rsquo;s behaviour. The simultaneous estimation of several percentiles is a cumber some task. The extended P2-algorithm proposed in this study significantly reduces the computation of the estimation. The algorithm simultaneously estimates several percentiles without storing and sorting the observations. Empirical validation studies indicate the algorithm can be used in simulation studies.
Bib @Article{raatikainen1987, title = {Simultaneous estimation of several percentiles}, abstract = {In many simulation studies the performance of the modeled system is characterized only by mean values of the performance indices. However, the percentiles are more informative in sum marizing the performance. Several simultaneous percentiles, pre sented for example in the form of the boxplot, provide the analyst with better understanding of the system&amp;#39;s behaviour. The simultaneous estimation of several percentiles is a cumber some task. The extended P2-algorithm proposed in this study significantly reduces the computation of the estimation. The algorithm simultaneously estimates several percentiles without storing and sorting the observations. Empirical validation studies indicate the algorithm can be used in simulation studies.}, volume = {49}, issn = {1741-3133}, url = {http://dx.doi.org/10.1177/003754978704900405}, doi = {10.1177/003754978704900405}, number = {4}, journal = {SIMULATION}, publisher = {SAGE Publications}, author = {Raatikainen, Kimmo E E}, year = {1987}, month = {oct}, pages = {159–163} }</description></item><item><title>The P² Algorithm for Dynamic Calculation of Quantiles and Histograms Without Storing Observations</title><link>https://aakinshin.net/library/papers/jain1985/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aakinshin.net/library/papers/jain1985/</guid><description>The P² quantile estimator is a fast sequential estimator that uses $O(1)$ memory. Allows implementing lightweight real-time monitoring of various indicators in software systems.
Reference Raj Jain, Imrich Chlamtac “The P² algorithm for dynamic calculation of quantiles and histograms without storing observations” (1985) // Communications of the ACM. Publisher: Association for Computing Machinery (ACM). Vol. 28. No 10. Pp. 1076–1085. DOI: 10.1145/4372.4378
Abstract What constitutes a dangerous equation? There are two obvious interpretations: Some equations are dangerous if you know them, and others are dangerous if you do not.
Bib @Article{jain1985, title = {The P² algorithm for dynamic calculation of quantiles and histograms without storing observations}, abstract = {What constitutes a dangerous equation? There are two obvious interpretations: Some equations are dangerous if you know them, and others are dangerous if you do not.}, volume = {28}, issn = {1557-7317}, url = {http://dx.doi.org/10.1145/4372.4378}, doi = {10.1145/4372.4378}, number = {10}, journal = {Communications of the ACM}, publisher = {Association for Computing Machinery (ACM)}, author = {Jain, Raj and Chlamtac, Imrich}, year = {1985}, month = {oct}, pages = {1076–1085} }</description></item></channel></rss>