<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>perfolizer on Andrey Akinshin</title><link>https://aakinshin.net/tags/perfolizer/</link><description>Recent content in perfolizer on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 25 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/perfolizer/index.xml" rel="self" type="application/rss+xml"/><item><title>Nonparametric Cohen's d-consistent effect size</title><link>https://aakinshin.net/posts/nonparametric-effect-size/</link><pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/nonparametric-effect-size/</guid><description>&lt;p>&lt;strong>Update: the second part of this post is available &lt;a href="https://aakinshin.net/posts/nonparametric-effect-size2/">here&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>The effect size is a common way to describe a difference between two distributions.
When these distributions are normal, one of the most popular approaches to express the effect size is &lt;a href="https://en.wikipedia.org/wiki/Effect_size#Cohen's_d">Cohen&amp;rsquo;s d&lt;/a>.
Unfortunately, it doesn&amp;rsquo;t work great for non-normal distributions.&lt;/p>
&lt;p>In this post, I will show a robust Cohen&amp;rsquo;s d-consistent effect size formula for nonparametric distributions.&lt;/p>





&lt;div class="row">
&lt;div class="mx-auto">
 &lt;a href="https://aakinshin.net/posts/nonparametric-effect-size/img/blackboard.png" target="_blank" alt="blackboard">
 &lt;img
 class="mx-auto d-block img-fluid"
 width='800'
 src="https://aakinshin.net/posts/nonparametric-effect-size/img/blackboard.png" />
 &lt;/a>
&lt;/div>
&lt;/div>
&lt;br /></description></item><item><title>Introducing perfolizer</title><link>https://aakinshin.net/posts/introducing-perfolizer/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/introducing-perfolizer/</guid><description>&lt;p>Over the last 7 years, I&amp;rsquo;ve been maintaining &lt;a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet&lt;/a>;
it&amp;rsquo;s a library that helps you to transform methods into benchmarks, track their performance, and share reproducible measurement experiments.
Today, BenchmarkDotNet became the most popular .NET library for benchmarking which was adopted by &lt;a href="https://github.com/dotnet/BenchmarkDotNet#who-use-benchmarkdotnet">3500+&lt;/a> projects including .NET Core.&lt;/p>
&lt;p>While it has tons of features for benchmarking that allows getting reliable and accurate measurements,
it has a limited set of features for performance analysis.
And it&amp;rsquo;s a problem for many developers.
Lately, I started to get a lot of emails when people ask me
&amp;ldquo;OK, I benchmarked my application and got tons of numbers. What should I do next?&amp;rdquo;
It&amp;rsquo;s an excellent question that requires special tools.
So, I decided to start another project that focuses specifically on performance analysis.&lt;/p>
&lt;p>Meet &lt;a href="https://github.com/AndreyAkinshin/perfolizer">perfolizer&lt;/a> â€” a toolkit for performance analysis!
The source code is available on &lt;a href="https://github.com/AndreyAkinshin/perfolizer">GitHub&lt;/a> under the MIT license.&lt;/p>





&lt;div class="row">
&lt;div class="mx-auto">
 &lt;a href="https://aakinshin.net/posts/introducing-perfolizer/img/perfolizer.svg" target="_blank" alt="perfolizer">
 &lt;img
 class="mx-auto d-block img-fluid"
 width='800'
 src="https://aakinshin.net/posts/introducing-perfolizer/img/perfolizer.svg" />
 &lt;/a>
&lt;/div>
&lt;/div>
&lt;br /></description></item></channel></rss>