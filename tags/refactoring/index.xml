<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Refactoring on Andrey Akinshin</title><link>https://aakinshin.net/tags/refactoring/</link><description>Recent content in Refactoring on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Jul 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>To Refactor Or Not To Refactor?</title><link>https://aakinshin.net/posts/refactoring/</link><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/refactoring/</guid><description>&lt;p>I like refactoring. No, I love refactoring. No, not even like this. I awfully love refactoring.&lt;/p>
&lt;p>I hate bad code and bad architecture. I feel quite creepy when I design a new feature and the near-by class contains absolute mess. I just can’t look at the sadly-looking variables. Sometimes before falling asleep I close my eyes and imagine what could be improved in the project. Sometimes I wake up at 3:00AM and go to my computer to improve something. I want to have not just code, but a masterpiece that is pleasant to look at, that is pleasant to work with at any stage of the project.&lt;/p>
&lt;p>If you just a little bit share my feelings we have something to talk about. The matter is that over some time something inside me began to hint that it’s a bad idea to refactor all code, everywhere and all the time. Understand me correctly – code should be good (even better when it’s ideal), but in real life it’s not reasonable to improve code instantly. I formed some rules about the refactoring timeliness. If I am itching to improve something, I look at these rules and think “Is that the moment when I need to refactor the code?” So, let’s talk about when refactoring is necessary and when it’s inappropriate.&lt;/p></description></item></channel></rss>