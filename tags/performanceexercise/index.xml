<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PerformanceExercise on Andrey Akinshin</title><link>https://aakinshin.net/tags/performanceexercise/</link><description>Recent content in PerformanceExercise on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 26 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/performanceexercise/index.xml" rel="self" type="application/rss+xml"/><item><title>Performance exercise: Division</title><link>https://aakinshin.net/posts/perfex-div/</link><pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/perfex-div/</guid><description>&lt;p>In the previous post, we &lt;a href="https://aakinshin.net/en/blog/dotnet/perfex-min/">discussed&lt;/a> the performance space of the minimum function
which was implemented via a simple ternary operator and with the help of bit magic.
Now we continue to talk about performance and bit hacks.
In particular, we will divide a positive number by three:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">uint&lt;/span> &lt;span class="n">Div3Simple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">uint&lt;/span> &lt;span class="n">Div3BitHacks&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">uint&lt;/span>&lt;span class="p">)((&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">ulong&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="m">0xAAAAAAAB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="m">33&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As usual, it&amp;rsquo;s hard to say which method is faster in advanced because the performance depends on the environment.
Here are some interesting results:&lt;/p>
&lt;table class="table table-sm">
 &lt;tr> &lt;th>&lt;/th> &lt;th>Simple&lt;/th> &lt;th>BitHacks&lt;/th> &lt;/tr>
 &lt;tr> &lt;th>LegacyJIT-x86&lt;/th> &lt;td class="norm">≈8.3ns&lt;/td> &lt;td class="fast">≈2.6ns&lt;/td> &lt;/tr>
 &lt;tr> &lt;th>LegacyJIT-x64&lt;/th> &lt;td class="fast">≈2.6ns&lt;/td> &lt;td class="fast">≈1.7ns&lt;/td> &lt;/tr>
 &lt;tr> &lt;th>RyuJIT-x64 &lt;/th> &lt;td class="norm">≈6.9ns&lt;/td> &lt;td class="fast">≈1.5ns&lt;/td> &lt;/tr>
 &lt;tr> &lt;th>Mono4.6.2-x86&lt;/th> &lt;td class="norm">≈8.5ns&lt;/td> &lt;td class="slow">≈14.4ns&lt;/td> &lt;/tr>
 &lt;tr> &lt;th>Mono4.6.2-x64&lt;/th> &lt;td class="norm">≈8.3ns&lt;/td> &lt;td class="fast">≈2.8ns&lt;/td> &lt;/tr>
&lt;/table></description></item><item><title>Performance exercise: Minimum</title><link>https://aakinshin.net/posts/perfex-min/</link><pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/perfex-min/</guid><description>&lt;p>Performance is tricky. Especially, if you are working with very fast operations. In today benchmarking exercise, we will try to measure performance of two simple methods which calculate minimum of two numbers. Sounds easy? Ok, let&amp;rsquo;s do it, here are our guinea pigs for today:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">MinTernary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">MinBitHacks&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">&amp;amp;&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="m">31&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="p">&amp;amp;&lt;/span> &lt;span class="p">(~(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="m">31&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here are some results:&lt;/p>
&lt;table class="table table-sm">
 &lt;style type="text/css" scoped>
 td.slow { color: #ff4444; } 
 td.fast { color: #00C851; }
 &lt;/style>
 &lt;tr> &lt;th>&lt;/th> &lt;th colspan="2">Random&lt;/th> &lt;th colspan="2">Const&lt;/th> &lt;/tr>
 &lt;tr> &lt;th>&lt;/th> &lt;th>Ternary&lt;/th> &lt;th>BitHacks&lt;/th> &lt;th>Ternary&lt;/th> &lt;th>BitHacks&lt;/th> &lt;/tr>
 &lt;tr> &lt;th>LegacyJIT-x86&lt;/th>
 &lt;td class="slow">≈643µs&lt;/td>
 &lt;td class="fast">≈227µs&lt;/td>
 &lt;td class="fast">≈160µs&lt;/td>
 &lt;td class="slow">≈226µs&lt;/td>
 &lt;/tr>
 &lt;tr> &lt;th>LegacyJIT-x64&lt;/th>
 &lt;td class="slow">≈450µs&lt;/td>
 &lt;td class="fast">≈123µs&lt;/td>
 &lt;td class="fast">≈68µs&lt;/td>
 &lt;td class="slow">≈123µs&lt;/td>
 &lt;/tr>
 &lt;tr> &lt;th>RyuJIT-x64&lt;/th>
 &lt;td class="slow">≈594µs&lt;/td>
 &lt;td class="fast">≈241µs&lt;/td>
 &lt;td class="fast">≈180µs&lt;/td>
 &lt;td class="slow">≈241µs&lt;/td>
 &lt;/tr>
 &lt;tr> &lt;th>Mono-x64&lt;/th>
 &lt;td class="fast">≈203µs&lt;/td>
 &lt;td class="slow">≈283µs&lt;/td>
 &lt;td class="fast">≈204µs&lt;/td>
 &lt;td class="slow">≈282µs&lt;/td>
 &lt;/tr>
&lt;/table>
&lt;p>What&amp;rsquo;s going on here? Let&amp;rsquo;s discuss it in detail.&lt;/p></description></item></channel></rss>