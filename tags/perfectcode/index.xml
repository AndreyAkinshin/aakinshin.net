<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PerfectCode on Andrey Akinshin</title><link>https://aakinshin.net/tags/perfectcode/</link><description>Recent content in PerfectCode on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Jul 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/perfectcode/index.xml" rel="self" type="application/rss+xml"/><item><title>To Refactor Or Not To Refactor?</title><link>https://aakinshin.net/posts/refactoring/</link><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/refactoring/</guid><description>&lt;p>I like refactoring. No, I love refactoring. No, not even like this. I awfully love refactoring.&lt;/p>
&lt;p>I hate bad code and bad architecture. I feel quite creepy when I design a new feature and the near-by class contains absolute mess. I just can’t look at the sadly-looking variables. Sometimes before falling asleep I close my eyes and imagine what could be improved in the project. Sometimes I wake up at 3:00AM and go to my computer to improve something. I want to have not just code, but a masterpiece that is pleasant to look at, that is pleasant to work with at any stage of the project.&lt;/p>
&lt;p>If you just a little bit share my feelings we have something to talk about. The matter is that over some time something inside me began to hint that it’s a bad idea to refactor all code, everywhere and all the time. Understand me correctly – code should be good (even better when it’s ideal), but in real life it’s not reasonable to improve code instantly. I formed some rules about the refactoring timeliness. If I am itching to improve something, I look at these rules and think “Is that the moment when I need to refactor the code?” So, let’s talk about when refactoring is necessary and when it’s inappropriate.&lt;/p></description></item><item><title>Perfect code and real projects</title><link>https://aakinshin.net/posts/perfect-code-and-real-projects/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/perfect-code-and-real-projects/</guid><description>I’ve got a problem. I am a perfectionist. I like perfect code. This is not only the correct way to develop applications but also the real proficiency. I enjoy reading a good listing not less than reading a good book. Developing architecture of a big project is no simpler than designing architecture of a big building. In case the work is good the result is no less beautiful. I am sometimes fascinated by how elegantly the patterns are entwined in the perfect software system. I am delighted by the attention to details when every method is so simple and understandable that can be a classic sample of the perfect code.
But, unfortunately, this splendor is ruined by stern reality and real projects. If we talk about production project, users don’t care how beautiful your code is and how wonderful your architecture is, they care to have a properly working project. But I still think that in any case you need to strive for writing good code, but without getting stuck on this idea. After reading various holy-war discussions related to correct approaches to writing code I noticed a trend: everyone tries to apply the mentioned approaches not to programming in general, but to personal development experience, to their own projects. Many developers don’t understand that good practice is not an absolute rule that should be followed in 100% of scenarios. It’s just an advice on what to do in most cases. You can get a dozen of scenarios where the practice won’t work at all. But it doesn’t mean that the approach is not that good, it’s just used in the wrong environment.
There is another problem: some developers are not that good as they think. I often see the following situation: such developer got some idea (without getting deep into details) in the big article about the perfect code and he started to use it everywhere and the developer’s code became even worse.</description></item><item><title>To Add Comments or Not to Add?</title><link>https://aakinshin.net/posts/comments/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/comments/</guid><description>&lt;p>&lt;em>A really good comment is the one you managed to avoid. (c) Uncle Bob&lt;/em>&lt;/p>
&lt;p>Lately, I’ve been feeling really tired of hot discussions on if it’s necessary to add comments in the code. As a rule, there are self-confident juniors with the indisputable statement as: “Why not to comment it, it will be unreadable without the comments!” on one side. And experienced seniors are on the other side. They understand that if it’s possible to go without the comments than “You better, damn it, do it in this way!” Probably, many developers got comment cravings since they’ve been students when professors made them comment every code line, “to make the student better understand it”. Real projects shouldn’t contain a lot of comments that only spoil the code. I don’t agitate for avoiding comments at all, but if you managed to write the code that doesn’t need comments, you can consider it your small victory. I would like to refer you to some good books that helped form my position. I like and respect these authors and completely share their opinion.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Steven C. McConnell, Code Complete&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Robert Martin, Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.amazon.com/The-Readable-Code-Theory-Practice/dp/0596802293">Dustin Boswell, Trevor Foucher, The Art of Readable Code (Theory in Practice)&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>