<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CoreCLR on Andrey Akinshin</title><link>https://aakinshin.net/tags/coreclr/</link><description>Recent content in CoreCLR on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 09 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/coreclr/index.xml" rel="self" type="application/rss+xml"/><item><title>Measuring Performance Improvements in .NET Core with BenchmarkDotNet (Part 1)</title><link>https://aakinshin.net/posts/stephen-toub-benchmarks-part1/</link><pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/stephen-toub-benchmarks-part1/</guid><description>&lt;p>A few days ago &lt;a href="https://github.com/stephentoub">Stephen Toub&lt;/a> published a great post
at the &lt;a href="https://blogs.msdn.microsoft.com/dotnet/">Microsoft .NET Blog&lt;/a>:
&lt;a href="https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/">Performance Improvements in .NET Core&lt;/a>.
He showed some significant performance changes in .NET Core 2.0 Preview 1 (compared with .NET Framework 4.7).
The .NET Core uses RyuJIT for generating assembly code.
When I first tried RyuJIT (e.g.,
&lt;a href="https://blogs.msdn.microsoft.com/dotnet/2014/02/27/ryujit-ctp2-getting-ready-for-prime-time/">CTP2&lt;/a>,
&lt;a href="https://blogs.msdn.microsoft.com/clrcodegeneration/2014/10/30/ryujit-ctp5-getting-closer-to-shipping-and-with-better-simd-support/">CTP5&lt;/a>, 2014),
I wasn&amp;rsquo;t excited about this: the preview versions had some bugs, and it worked slowly on my applications.
However, the idea of a rethought and open-source JIT-compiler was a huge step forward and investment in the future.
RyuJIT had been developed very actively in recent years: not only by Microsoft but with the help of the community.
I&amp;rsquo;m still not happy about the generated assembly code in some methods, but I have to admit that the RyuJIT (as a part of .NET Core) works pretty well today:
it shows a good performance level not only on artificial benchmarks but also on real user code.
Also, there are a lot of changes
not only in &lt;a href="https://github.com/dotnet/coreclr">dotnet/coreclr&lt;/a> (the .NET Core runtime),
but also in &lt;a href="https://github.com/dotnet/corefx">dotnet/corefx&lt;/a> (the .NET Core foundational libraries).
It&amp;rsquo;s very nice to watch how the community helps to optimize well-used classes which have not changed for years.&lt;/p>
&lt;p>Now let&amp;rsquo;s talk about benchmarks.
For the demonstration, Stephen wrote a set of handwritten benchmarks.
A few people (in
&lt;a href="https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/#comments">comments&lt;/a> and on &lt;a href="https://news.ycombinator.com/item?id=14507936">HackerNews&lt;/a>)
asked about &lt;a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet&lt;/a> regarding these samples (as a better tool for performance measurements).
So, I decided to try all these benchmarks on BenchmarkDotNet.&lt;/p>
&lt;p>In this post, we will discuss
how can BenchmarkDotNet help in such performance investigations,
which benchmarking approaches (and when) are better to use,
and how can we improve these measurements.&lt;/p></description></item><item><title>A bug story about named mutex on Mono</title><link>https://aakinshin.net/posts/namedmutex-on-mono/</link><pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/namedmutex-on-mono/</guid><description>&lt;p>When you write some multithreading magic on .NET,
you can use a cool synchronization primitive called &lt;a href="https://msdn.microsoft.com/en-us/library/system.threading.mutex(v=vs.110).aspx">Mutex&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">mutex&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Mutex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Global\\MyNamedMutex&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You also can make it &lt;a href="https://msdn.microsoft.com/en-us/library/f55ddskf(v=vs.110).aspx">named&lt;/a> (and share the mutex between processes)
which works perfectly on Windows:&lt;/p>
&lt;div class="mx-auto">
 &lt;img class="mx-auto d-block" width="600" src="https://aakinshin.net/img/posts/dotnet/namedmutex-on-mono/front.png" />
&lt;/div>
&lt;p>However, today the .NET Framework is cross-platform, so this code should work on any operation system.
What will happen if you use named mutex on Linux or MacOS with the help of Mono or CoreCLR?
Is it possible to create some tricky bug based on this case?
Of course, it does.
Today I want to tell you a story about such bug in &lt;a href="https://www.jetbrains.com/rider/">Rider&lt;/a> which was a headache for several weeks.&lt;/p></description></item><item><title>InvalidDataException in Process.GetProcesses</title><link>https://aakinshin.net/posts/invaliddataexception-in-getprocesses/</link><pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/invaliddataexception-in-getprocesses/</guid><description>&lt;p>Consider the following program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetProcesses&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It seems that all exceptions should be caught.
However, &lt;em>sometimes&lt;/em>, I had the following exception on Linux with &lt;code>dotnet cli-1.0.0-preview2&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="n">dotnet&lt;/span> &lt;span class="n">run&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InvalidDataException&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">invalid&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">decoding&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StringParser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ParseNextChar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">Interop&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">procfs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">TryParseStatFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">statFilePath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ParsedStat&lt;/span>&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ReusableTextReader&lt;/span> &lt;span class="n">reusableReader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProcessManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateProcessInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ParsedStat&lt;/span> &lt;span class="n">procFsStat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ReusableTextReader&lt;/span> &lt;span class="n">reusableReader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProcessManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateProcessInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Int32&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ReusableTextReader&lt;/span> &lt;span class="n">reusableReader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProcessManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetProcessInfos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">machineName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetProcesses&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">machineName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetProcesses&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">at&lt;/span> &lt;span class="n">DotNetCoreConsoleApplication&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Program&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">akinshin&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">Program&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">line&lt;/span> &lt;span class="m">12&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How is that possible?&lt;/p></description></item></channel></rss>