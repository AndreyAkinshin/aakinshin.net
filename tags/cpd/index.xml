<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Change point detection on Andrey Akinshin</title><link>https://aakinshin.net/tags/cpd/</link><description>Recent content in Change point detection on Andrey Akinshin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 12 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/tags/cpd/index.xml" rel="self" type="application/rss+xml"/><item><title>Two-pass change point detection for temporary interval condensation</title><link>https://aakinshin.net/posts/two-pass-cpd/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/two-pass-cpd/</guid><description>&lt;p>When we choose a change point detection algorithm, the most important thing is to clearly understand
why we want to detect the change points.
The knowledge of the final business goals is essential.
In this post, I show a simple example of how a business requirement can be translated into algorithm adjustments.&lt;/p></description></item><item><title>Sporadic noise problem in change point detection</title><link>https://aakinshin.net/posts/sporadic-noise-problem/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/sporadic-noise-problem/</guid><description>&lt;p>We consider a problem of change point detection at the end of a time series.
Let us say that we systematically monitor readings of an indicator,
and we want to react to noticeable changes in the measured values as fast as possible.
When there are no changes in the underlying distribution,
any alerts about detected change points should be considered false positives.
Typically, in such problems,
we consider the &lt;a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">i.i.d.&lt;/a>
assumption that claims that in the absence of change points,
all the measurements are independent and identically distributed.
Such an assumption significantly simplifies the mathematical model,
but unfortunately, it is rarely fully satisfied in real life.
If we want to build a reliable change point detection system,
it is important to be aware of possible real-life artifacts that introduce deviations from the declared model.
In this problem, I discuss the problem of the sporadic noise.&lt;/p></description></item><item><title>Challenges of change point detection in CI performance data</title><link>https://aakinshin.net/posts/cpd-perf-challenges/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/cpd-perf-challenges/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Change_detection">Change point detection&lt;/a> is a popular task in various disciplines.
There are many algorithms that solve this problem.
For example,
in &lt;a href="https://arxiv.org/abs/1801.00718v3">Selective review of offline change point detection methods (2020)&lt;/a>,
the authors presented a classification of different approaches and discussed 35 algorithms.
However, not all the algorithms fit all the situations.&lt;/p>
&lt;p>In this post, we consider the problem of change point detection in time series based on
software performance measurements obtained from a continuous integration (CI) server.
Examples of data sources are CI builds, unit tests, benchmarks, performance tests, and so on.
We would like to automatically find performance degradations in such time series.
Unfortunately, most of the available algorithms do not provide decent solutions for this problem.
In this post, I discuss some challenges that arise when we are looking for change points in CI performance data.&lt;/p></description></item><item><title>Implementation of efficient algorithm for changepoint detection: ED-PELT</title><link>https://aakinshin.net/posts/edpelt/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://aakinshin.net/posts/edpelt/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Change_detection">Changepoint detection&lt;/a> is an important task that has a lot of applications.
For example, I use it to detect changes in the &lt;a href="https://www.jetbrains.com/rider/">Rider&lt;/a> performance test suite.
It&amp;rsquo;s very important to detect not only performance degradations, but any kinds of performance changes
(e.g., the variance may increase, or a unimodal distribution may be split to several modes).
You can see examples of such changes on the following picture (we change the color when a changepoint is detected):&lt;/p>








&lt;div class="flex my-7 justify-center">
 &lt;a class="img-light hidden" href="https://aakinshin.net/posts/edpelt/img/edpelt-light.png" target="_blank" alt="edpelt">
 &lt;img
 src="https://aakinshin.net/posts/edpelt/img/edpelt-light.png" 
 width='800'
 />
 &lt;/a>
 &lt;a class="img-dark hidden" href="https://aakinshin.net/posts/edpelt/img/edpelt-dark.png" target="_blank" alt="edpelt">
 &lt;img
 src="https://aakinshin.net/posts/edpelt/img/edpelt-dark.png" 
 width='800'
 />
 &lt;/a>
&lt;/div>


&lt;p>Unfortunately, it&amp;rsquo;s pretty hard to write a reliable and fast algorithm for changepoint detection.
Recently, I found a cool paper (&lt;a href="https://link.springer.com/article/10.1007/s11222-016-9687-5">Haynes, K., Fearnhead, P. &amp;amp; Eckley, I.A. &amp;ldquo;A computationally efficient nonparametric approach for changepoint detection,&amp;rdquo; Stat Comput (2017) 27: 1293&lt;/a>) that describes the ED-PELT algorithm.
It has &lt;code>O(N*log(N))&lt;/code> complexity and pretty good detection accuracy.
The reference implementation can be used via the &lt;a href="https://cran.r-project.org/web/packages/changepoint.np/index.html">changepoint.np&lt;/a> R package.
However, I can&amp;rsquo;t use &lt;a href="https://www.r-project.org/">R&lt;/a> on our build server, so I decided to write my own C# implementation.&lt;/p></description></item></channel></rss>