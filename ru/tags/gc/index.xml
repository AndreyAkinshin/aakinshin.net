<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GC on Андрей Акиньшин</title><link>https://aakinshin.net/ru/tags/gc/</link><description>Recent content in GC on Андрей Акиньшин</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Thu, 08 Aug 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/ru/tags/gc/index.xml" rel="self" type="application/rss+xml"/><item><title>Неожиданное место для сборки мусора в .NET</title><link>https://aakinshin.net/ru/posts/gc-native/</link><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/ru/posts/gc-native/</guid><description>&lt;p>Платформа .NET обеспечивает нас высокоинтеллектуальным сборщиком мусора, который избавляет от рутины ручного управления памятью. И в 95% случаев можно действительно забыть про память и связанные с ней нюансы. Но вот оставшиеся 5% обладают своей спецификой, связанной с неуправляемыми ресурсами, слишком большими объектами и т.д. И тут лучше бы хорошо разбираться в том, как производится сборка мусора. В противном случае вас могут ждать очень неприятные сюрпризы.&lt;/p>
&lt;p>Как вы думаете, может ли GC собрать объект до того, как выполнится последний из его методов? Оказывается, может. Правда, для этого необходимо запустить приложение в Release mode и отдельно от студии (without debugging). В этом случае JIT-компилятор сделает определённые оптимизации, в результате которых такая ситуация возможна. Разумеется, делает он это только тогда, когда в оставшемся теле метода нет ссылок на сам объект или его поля. Казалось бы, достаточно невинная оптимизация. Но она может привести к проблемам, если мы имеем дело с неуправляемыми ресурсами: сборка объекта может произойти &lt;em>до того&lt;/em>, как закончится операция над неуправляемым объектом, что вполне вероятно повлечёт падение приложения.&lt;/p></description></item></channel></rss>