<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IL on Андрей Акиньшин</title><link>https://aakinshin.net/ru/tags/il/</link><description>Recent content in IL on Андрей Акиньшин</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Thu, 29 Aug 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/ru/tags/il/index.xml" rel="self" type="application/rss+xml"/><item><title>Об итерировании статичных массивов в .NET</title><link>https://aakinshin.net/ru/posts/static-array-iteration/</link><pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/ru/posts/static-array-iteration/</guid><description>&lt;h2 id="часть-1">Часть 1&lt;/h2>
&lt;p>Управляемый подход платформы .NET делает жизнь разработчиков достаточно простой, беря на себя многие рутинные операции. Большую часть времени программист может вообще не вспоминать о технической реализации платформы, сосредоточившись исключительно на логике своего приложения. Но иногда попадаются задачи, критичные по производительности. Существует множество различных подходов к оптимизации кода в таких ситуациях вплоть до переписывания наиболее важных частей кода через неуправляемый код. Однако, зачастую для увеличения скорости приложения достаточно понимать, сколько времени тратится на ту или иную операцию. Знание подобных вещей позволит оптимизировать некоторые методы с помощью достаточно простых модификаций исходного кода.&lt;/p>
&lt;p>В этой статье мне хотелось бы поговорить о скорости доступа к массивам, ссылки на которые хранятся в статичных переменных. Дело в том, что в скорость итерирования по ним в зависимости от условий запуска может быть ниже, чем для массива, ссылка на который хранится в обычном поле экземпляра класса или локальной переменной. Рассмотрим пример.&lt;/p></description></item><item><title>Недокументированные ключевые слова C# или превращаем объект в тыкву</title><link>https://aakinshin.net/ru/posts/undocumented-keywords-in-cs/</link><pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/ru/posts/undocumented-keywords-in-cs/</guid><description>&lt;p>Стандартный компилятор C# поддерживает 4 недокументированных ключевых слова: &lt;code>__makeref&lt;/code>, &lt;code>__reftype&lt;/code>, &lt;code>__refvalue&lt;/code>, &lt;code>__arglist&lt;/code>. Эти слова даже успешно распознаются в Visual Studio (хотя, ReSharper на них ругается). Они не даром исключены из стандарта — их использование может повлечь серьёзные проблемы с безопасностью. Поэтому не нужно их использовать везде подряд, но в отдельных исключительных случаях они могут пригодиться. В этом посте я обсужу предназначение недокументированных команд, рассмотрю вопросы их производительности и научусь превращать объект в тыкву.&lt;/p></description></item></channel></rss>