<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PerfectCode on Андрей Акиньшин</title><link>https://aakinshin.net/ru/tags/perfectcode/</link><description>Recent content in PerfectCode on Андрей Акиньшин</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Sat, 19 Jul 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aakinshin.net/ru/tags/perfectcode/index.xml" rel="self" type="application/rss+xml"/><item><title>Рефакторить или не рефакторить?</title><link>https://aakinshin.net/ru/posts/refactoring/</link><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>https://aakinshin.net/ru/posts/refactoring/</guid><description>&lt;p>Мне нравится рефакторинг. Нет, не так. Я люблю рефакторинг. Не, даже не так. Я &lt;em>чертовски&lt;/em> люблю рефакторинг.&lt;/p>
&lt;p>Я не переношу плохой код и плохую архитектуру. Меня коробит, когда я пишу новую фичу, а в соседнем классе творится полный бардак. Я просто не могу смотреть на печально названные переменные. Иногда перед сном я закрываю глаза и представляю, что можно было бы улучшить в проекте. Иногда я просыпаюсь в три часа ночи и иду к ноутбуку, чтобы что-нибудь поправить. Мне хочется, чтобы на любой стадии разработки код был не просто кодом, а произведением искусства, на которое приятно смотреть, с которым приятно работать.&lt;/p>
&lt;p>Если вы хоть немного разделяете мои ощущения, то нам есть о чём поговорить. Дело в том, что со временем что-то внутри меня начало подсказывать, что рефакторить всё подряд, везде и всё время — не самая лучшая идея. Поймите меня правильно, код должен быть хорошим (а лучше бы ему быть идеальным), но в условиях суровой реальности не всегда разумно постоянно заниматься улучшением кода. Я вывел для себя несколько правил о своевременности рефакторинга. Если у меня начинают чесаться руки что-нибудь улучшить, то я оглядываюсь на эти правила и начинаю думать: «А действительно ли сейчас тот момент, когда нужно нарефакторить?». Давайте порассуждаем о том, в каких же случаях рефакторинг уместен, а в каких — не очень.&lt;/p>
&lt;p class="center">
 &lt;img src="https://aakinshin.net/img/posts/dev/refactoring/front.png" height="200px" />
&lt;/p></description></item><item><title>Комментировать или не комментировать?</title><link>https://aakinshin.net/ru/posts/comments/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/ru/posts/comments/</guid><description>&lt;p>&lt;em>По-настоящему хороший комментарий — тот, без которого вам удалось обойтись. © Дядюшка Боб&lt;/em>&lt;/p>
&lt;p class="center">
 &lt;img src="https://aakinshin.net/img/posts/dev/refactoring/front.png" height="250px" />
&lt;/p>
&lt;p>В последнее время меня стали очень утомлять оживлённые дебаты о том, нужно ли комментировать код. Как правило, по одну сторону баррикад — самоуверенные джуниоры, имеющие непререкаемую позицию вида &lt;em>«А как же его не комментировать, ведь без комментариев непонятно будет!»&lt;/em>. По другую — умудрённые опытом сеньоры. Они понимают, что если возможно обойтись без комментариев, то &lt;em>«Лучше бы, чёрт возьми, так и сделать!»&lt;/em>. Наверное, у многих жажда комментировать идёт со студенческой скамьи, когда товарищи преподаватели заставляли комментировать каждую строчку,
&lt;em>«чтобы студент лучше разобрался»&lt;/em>. В реальном проекте не должно быть кучи комментариев, которые только и делают, что засоряют код. Впрочем, я не агитирую вообще не писать комментарии, но если вам удалось написать такой код, который не требует пояснений, то расценивайте это как свою маленькую победу. Сразу хотелось бы сослаться на несколько очень умных книжек, на основе которых формировалась моя позиция. Я люблю и уважаю авторов этих работ, полностью разделяя их мнение.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.ozon.ru/context/detail/id/5508646/">С. Макконнелл, «Совершенный код. Мастер-класс»&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ozon.ru/context/detail/id/20216991/">Р. Мартин, «Чистый код. Создание, анализ и рефакторинг»&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ozon.ru/context/detail/id/8466390/">Д. Босуэлл, Т. Фаучер, «Читаемый код, или Программирование как искусство»&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Совершенный код и реальные проекты</title><link>https://aakinshin.net/ru/posts/perfect-code-and-real-projects/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>https://aakinshin.net/ru/posts/perfect-code-and-real-projects/</guid><description>&lt;p>У меня есть проблема — я перфекционист. Я люблю совершенный код. Ведь это не только правильный подход к написанию программ, но и настоящее искусство. От чтения хорошего листинга я получаю не меньше удовольствия, чем от чтения хорошей книги. Проектировать архитектуру большого проекта ничуть не легче, чем проектировать архитектуру большого здания, а в случае хорошей работы — результат не менее прекрасен. Порой меня завораживает то, как изящно переплелись паттерны проектирования в создании совершенной программной системы. Меня восхищает внимание к деталям, когда абсолютно каждый метод настолько прост и понятен, что претендует на место классического примера совершенного кода.&lt;/p>
&lt;p class="center">
 &lt;img src="https://aakinshin.net/img/posts/dev/perfect-code-and-real-projects/front.png" height="200px" />
&lt;/p>
&lt;p>Но, увы, всё это великолепие разбивается о суровую действительность и реальные проекты. Если мы говорим о продакшн-проекте, то пользователей не волнует, насколько красив ваш код и насколько хороша архитектура, их волнует, чтобы проект хорошо работал. Но я всё равно считаю, что в любом случае нужно стремиться писать правильно, просто при этом фанатизма быть не должно. После чтения различных холиваров на тему правильных подходов к написанию кода мне в глаза бросилась одна тенденция: каждый пытается применить означенные подходы не в целом к программированию, а только к своему опыту разработки, к своим проектам. Многие не осознают, что хорошие практики — это не абсолютные правила, которые должны строго соблюдаться в 100% сценариев, это лишь советы о том, как следовало бы поступать в большинстве ситуаций. На каждую хорошую практику всегда можно придумать несколько дюжин примеров, в которых она работать не будет. Но это вовсе не означает, что хорошая практика не такая уж и хорошая, просто её применили не к месту.&lt;/p></description></item></channel></rss>